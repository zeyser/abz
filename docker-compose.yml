# check your docker version and set compatible number https://docs.docker.com/compose/compose-file/
version: '3'
services:
    api-nginx:

        # Build an image from a Dockerfile
        build:

            # build context. I think it's a directory  with whom docker work on build time
            context: ./api

            # actually our dockerfile from what we can build image and than container
            dockerfile: docker/nginx.docker

        # included directories. With this dir-s our container can work in run time(read,write etc)
        # on column we set link between files in project(host) and system in container our/files:system/files
        volumes:
            - ./api:/var/www/api
            #- ./docker/nginx/ssl:/etc/nginx/ssl
        ports:
            - "8081:80"
        # I believe it need for substitution straight ip addresses on linking
        # but here[https://docs.docker.com/compose/compose-file/#links] is recommended not use link and instead use
        # user-defined networks https://docs.docker.com/network/
        links:
          - api-php-fpm

    api-php-cli:

        # we can see this name with "docker ps". We can use something like this "docker exec -it php-cli-cont bash"
        # and we enter into console of the remote machine
        container_name: php-cli-container
        build:
            context: ./api
            dockerfile: docker/php-cli.docker
        volumes:
            - ./api:/var/www/api
        links:
            - api-mysql

        # In Laravel we use .env with predefined local variables, so here we can preset this var-s only for current
        # container
        environment:
            - "DB_PORT=3306"
            - "DB_HOST=mysql"

        # https://www.quora.com/What-does-the-t-or-tty-do-in-Docker
        # and https://stackoverflow.com/questions/36249744/interactive-shell-using-docker-compose#39150040
        # basically to use console -t(see output) and -i(write commands)
        # !!! I think we can use console even without tty, but tty allow to use commands as
        # docker-compose exec node npm rebuild node-sass --force  OR docker-compose exec php-cli php artisan queue:work
        tty: true
        #stdin_open: true

    api-php-fpm:
        build:
            context: ./api
            dockerfile: docker/php-fpm.docker
        volumes:
            - ./api:/var/www/api
        links:
            - api-mysql
        environment:
            - "DB_PORT=3306"
            - "DB_HOST=mysql"

    api-mysql:
        image: mysql:8.0

        # It's need for persistence. More info here https://hub.docker.com/_/mysql/
        volumes:
            - ./api/storage/docker/mysql:/var/lib/mysql
        environment:
            - "MYSQL_ROOT_PASSWORD=secret"
            - "MYSQL_USER=app"
            - "MYSQL_PASSWORD=secret"
            - "MYSQL_DATABASE=abz"
        ports:
            - "33061:3306"

    frontend-nginx:
        build:
            context: ./frontend/docker
            dockerfile: nginx.docker
        volumes:
            - ./frontend:/var/www/frontend
        depends_on:
            - api-php-fpm
        ports:
            - "8080:80"

    frontend-nodejs:
        container_name: node
        image: node:10.11-jessie
        volumes:
            - ./frontend:/var/www/frontend
        working_dir: /var/www/frontend
        tty: true